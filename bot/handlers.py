import logging
from aiogram.filters import Command
import asyncio

from aiogram.types import Message

from api.crud import get_tasks
from bot.services import get_task_text, format_task_message, create_task, delete_task, get_task
from bot.keyboards import task_keyboard, main_menu_keyboard
from config import setup_logging
from api.dependencies import get_async_session
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import types, F, Router

setup_logging()
router = Router()
logger = logging.getLogger(__name__)


class EditTaskStates(StatesGroup):
    waiting_for_new_title = State()


class AddTaskStates(StatesGroup):
    waiting_for_task_text = State()


@router.message(Command("start"))
async def handle_start(message: types.Message, state: FSMContext):
    try:
        msg = await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É:",
            reply_markup=main_menu_keyboard()
        )
        await state.update_data(start_message_id=msg.message_id)

        try:
            await message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å /start —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_start: {e}")


@router.message(Command("get_task"))
async def handle_get_task(message: types.Message):
    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("‚ùó –£–∫–∞–∂–∏ ID –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /get_task 123")
            return

        task_id = int(parts[1])

        async with get_async_session() as db:
            title, keyboard = await get_task_text(db, task_id)
            if title is None:
                await message.answer(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            else:
                await message.answer(title, reply_markup=keyboard)
    except ValueError:
        await message.answer("‚ùó ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: /get_task 123")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_get_task: {e}")
        await message.answer("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("get_tasks"))
async def handle_get_all_tasks(message: types.Message, state: FSMContext):
    data = await state.get_data()
    task_message_ids = data.get("task_message_ids", [])
    for msg_id in task_message_ids:
        try:
            await message.chat.delete_message(msg_id)
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
            if "message to delete not found" not in str(e).lower():
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á: {e}")
    try:
        async with get_async_session() as db:
            tasks = await get_tasks(db)
        if not tasks:
            msg = await message.answer("–ó–∞–¥–∞—á –Ω–µ—Ç.")
            await state.update_data(task_message_ids=[msg.message_id])
            # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                await message.delete()
            except Exception:
                pass
            return
        new_message_ids = []
        for task in tasks:
            text = format_task_message(task)
            keyboard = task_keyboard(task)
            sent_msg = await message.answer(text, reply_markup=keyboard)
            new_message_ids.append(sent_msg.message_id)
        await state.update_data(task_message_ids=new_message_ids)
        try:
            await message.delete()
        except Exception:
            pass
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_get_all_tasks: {e}")
        await message.answer("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def start_add_task(message: types.Message, state: FSMContext):
    msg = await message.answer("‚úçÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏")
    await state.set_state(AddTaskStates.waiting_for_task_text)
    await state.update_data(
        invite_message_id=msg.message_id,
        trigger_message_id=message.message_id
    )


@router.message(AddTaskStates.waiting_for_task_text)
async def process_task_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    invite_message_id = data.get("invite_message_id")
    trigger_message_id = data.get("trigger_message_id")

    task_title = message.text.strip()
    if not task_title:
        await message.answer("‚ùó –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return

    try:
        async with get_async_session() as db:
            task = await create_task(db, task_title)
            msg = await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: #{task.id} ‚Äî {task.title}")
            await asyncio.sleep(1)
            await msg.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        await message.answer("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    try:
        if invite_message_id:
            await message.chat.delete_message(invite_message_id)
        if trigger_message_id:
            await message.chat.delete_message(trigger_message_id)
        await message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –°–ø–µ—Ä–≤–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ (—É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π + –≤—ã–≤–æ–¥–∏–º –Ω–æ–≤—ã–π)
    await handle_get_all_tasks(message, state)

    # –ü–æ—Ç–æ–º —á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@router.callback_query(F.data.startswith("delete:"))
async def handle_delete(callback: types.CallbackQuery):
    task_id = int(callback.data.split(":")[1])
    async with get_async_session() as db:
        task = await delete_task(db, task_id)
    if task:
        await callback.message.edit_text("üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")
        await asyncio.sleep(1)
        await callback.message.delete()
    else:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)


@router.callback_query(F.data.startswith("done_") | F.data.startswith("undone_"))
async def handle_toggle_done(callback: types.CallbackQuery):
    action, task_id_str = callback.data.split("_")
    task_id = int(task_id_str)

    async with get_async_session() as db:
        task = await get_task(db, task_id)
        if not task:
            await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        task.done = True if action == "done" else False
        await db.commit()
        await db.refresh(task)

        text = format_task_message(task)
        keyboard = task_keyboard(task)
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer("–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω")


@router.callback_query(F.data.startswith("edit_"))
async def start_edit_task(callback: types.CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split("_")[1])
    await state.update_data(task_id=task_id)
    await callback.message.answer("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏")
    await state.set_state(EditTaskStates.waiting_for_new_title)
    await callback.answer()

    @router.message(AddTaskStates.waiting_for_task_text)
    async def process_task_text(message: types.Message, state: FSMContext):
        data = await state.get_data()
        invite_message_id = data.get("invite_message_id")

        task_title = message.text.strip()
        if not task_title:
            err = await message.answer("‚ùó –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
            await safe_delete(err, delay=3)
            return
        try:
            async with get_async_session() as db:
                task = await create_task(db, task_title)
            notify = await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: #{task.id} ‚Äî {task.title}")
            await safe_delete(notify, delay=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            err = await message.answer("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await safe_delete(err, delay=3)
        if invite_message_id:
            try:
                await message.chat.delete_message(invite_message_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å invite-—Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        await safe_delete(message)
        await state.clear()


async def safe_delete(message: Message, delay: float = 0):
    try:
        if delay:
            await asyncio.sleep(delay)
        await message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (id={message.message_id}): {e}")
